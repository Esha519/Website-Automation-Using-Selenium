import time

import pytest
from selenium.common.exceptions import NoSuchElementException
# import pdb
from selenium import webdriver
from selenium.common import TimeoutException, NoSuchElementException
from selenium.webdriver.common.by import \
    By  # I want to use the 'By' tool from Selenium in my code to help me find and interact with elements on a webpage."
from selenium.webdriver.support.wait import \
    WebDriverWait  # line is like saying, "I want to use the waiting tool from Selenium called 'WebDriverWait' in my code." This tool helps us ensure that the webpage is ready for the actions we want to perform.
from selenium.webdriver.support import \
    expected_conditions as EC  # In Selenium, we often need to wait for things to happen on a webpage. 'expected_conditions' helps us define what we are waiting for.


@pytest.fixture(scope="function")
def driver():
    driver = webdriver.Chrome()
    yield driver
    driver.quit()


def test_If_email_is_blank(driver):
    driver.get("User website desire url")
    email_field = driver.find_element(By.ID, "add value")
    submit_button = driver.find_element(By.XPATH, 'add value')
    email_field.send_keys(" ")

    submit_button.click()
    # alert = WebDriverWait(driver, 30).until(
    #     EC.presence_of_element_located((By.CLASS_NAME, "ant-modal-confirm-content")))
    time.sleep(5)
    alert = driver.find_element(By.CLASS_NAME, "add value")
    error_text1 = alert.text

    assert error_text1 == "The email field is required." #you can modify this alert based on your need


def test_If_email_has_no_account(driver):
    driver.get("User your website forgot passoword UI url")
    email_field = driver.find_element(By.ID, " add value")
    submit_button = driver.find_element(By.XPATH, 'add value')
    email_field.send_keys("ssh08@gmail.com ")

    submit_button.click()
    # alert = WebDriverWait(driver, 30).until(
    #     EC.presence_of_element_located((By.CLASS_NAME, "ant-modal-confirm-content")))
    time.sleep(5)
    alert = driver.find_element(By.CLASS_NAME, "add value")
    error_text2 = alert.text
    assert error_text2 == "Email not found" #you can modify this alert based on your need


def test_If_email_is_not_valid(driver):
    driver.get("use your url")
    email_field = driver.find_element(By.ID, "add value")
    submit_button = driver.find_element(By.XPATH, 'add value')
    email_field.send_keys("abs@gmail.com")

    submit_button.click()
    # alert = WebDriverWait(driver, 30).until(
    #     EC.presence_of_element_located((By.CLASS_NAME, "ant-modal-confirm-content")))
    time.sleep(5)
    alert = driver.find_element(By.CLASS_NAME, "add value")
    error_text3 = alert.text
    assert error_text3 == "The email must be a valid email address." #you can modify this alert based on your need


def test_If_email_is_valid(driver):
    driver.get("use your url")
    try:
        email_field = driver.find_element(By.ID, "add value")
        submit_button = driver.find_element(By.XPATH, ' add your value')
        email_field.send_keys("abc@gmail.com ")
        submit_button.click()
    # alert = WebDriverWait(driver, 30).until(
    #     EC.presence_of_element_located((By.CLASS_NAME, "ant-modal-confirm-content")))
        time.sleep(5)
        alert = driver.find_element(By.CLASS_NAME, "add your value")
        error_text3 = alert.text
        assert error_text3 == "Check email for reset password code." #you can modify this alert based on your need
    except NoSuchElementException as e:
        print(f"Element not found. Exception details: {e}")


pytest.main(["-v", "--html=F_Report.html"])
